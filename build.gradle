buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath group: 'org.parchmentmc.librarian.forgegradle', name: 'org.parchmentmc.librarian.forgegradle.gradle.plugin', version: '1.+'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_name} ${minecraft_version}"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    //mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'Client'
        }

        server {
            taskName 'Server'
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), "--existing-mod", "blueprint", "--existing-mod", "shieldexp", "--existing-mod", "dye_depot"
            taskName 'Data'
        }

        forEach {
            it.workingDirectory project.file('run')
            it.ideaModule "${rootProject.name}.main"
            it.args "-mixin.config=${mod_id}.mixins.json"
            it.mods {
                create(mod_id) {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        // location of the maven that hosts Blueprint
        name = "Jackson's Maven"
        url = "https://maven.jaackson.me"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup("curse.maven")
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup("maven.modrinth")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("com.teamabnormals:blueprint:${minecraft_version}-${blueprint_version}")
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    // Compatibilities
    runtimeOnly(fg.deobf("maven.modrinth:create:${create_version}"))
    implementation(fg.deobf("maven.modrinth:farmers-delight:${farmersdelight_version}"))
    implementation(fg.deobf("maven.modrinth:nethers-delight:${nethersdelight_version}"))
    implementation(fg.deobf("maven.modrinth:shield-expansion:${shieldexpansion_version}"))
    implementation(fg.deobf("maven.modrinth:create:${create_version}"))
    implementation(fg.deobf("maven.modrinth:supplementaries:${supplementaries_version}"))

    // For dev testing
    runtimeOnly(fg.deobf("maven.modrinth:scannable:${scannable_version}"))
    runtimeOnly(fg.deobf("maven.modrinth:architectury-api:${architectury_version}"))
    runtimeOnly(fg.deobf("maven.modrinth:moonlight:${moonlight_lib_version}"))
    runtimeOnly(fg.deobf("maven.modrinth:dye-depot:${dye_depot_version}"))

    /// Utilities for the development environment
    //runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_version}")
    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    runtimeOnly(fg.deobf("maven.modrinth:scannable:${scannable_version}"))
    runtimeOnly(fg.deobf("maven.modrinth:architectury-api:${architectury_version}"))
    ///
}

jar {
    archiveClassifier.set("raw")
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

tasks.jarJar {
    archiveClassifier.set("")
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
